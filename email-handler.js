/**
 * EmailJS Configuration and Email Handling for Casa Mobelle
 * Manejo de env√≠o de correos para formulario de cotizaci√≥n
 */

// ===== CONFIGURACI√ìN EMAILJS =====
const EMAILJS_CONFIG = {
    PUBLIC_KEY: 'Wg5X527MYMwivPKvs', // Clave p√∫blica de EmailJS
    SERVICE_ID: 'service_i8ylqzi', // Service ID configurado
    TEMPLATE_CLIENTE: 'template_s60kolv' // Template de confirmaci√≥n para cliente (EmailJS env√≠a copia autom√°tica)
};

// Hacer configuraci√≥n disponible globalmente para debug
window.EMAILJS_CONFIG = EMAILJS_CONFIG;

// ===== INICIALIZACI√ìN =====
let emailjsInitialized = false;

function initEmailJS() {
    if (emailjsInitialized) return true;
    
    // Verificar que EmailJS est√© cargado
    if (typeof emailjs === 'undefined') {
        console.error('EmailJS no est√° cargado. Verifica que el script est√© incluido.');
        return false;
    }
    
    // Verificar configuraci√≥n
    if (!EMAILJS_CONFIG.PUBLIC_KEY || EMAILJS_CONFIG.PUBLIC_KEY === 'TU_PUBLIC_KEY_AQUI') {
        console.warn('EmailJS no est√° configurado. Revisa CONFIGURACION_EMAILJS.md');
        return false;
    }
    
    try {
        emailjs.init({
            publicKey: EMAILJS_CONFIG.PUBLIC_KEY,
        });
        emailjsInitialized = true;
        console.log('‚úÖ EmailJS v4 inicializado correctamente');
        return true;
    } catch (error) {
        console.error('‚ùå Error inicializando EmailJS:', error);
        return false;
    }
}

// ===== FUNCIONES DE DIAGN√ìSTICO =====

function diagnosticarEmailJS() {
    console.log('üîç Diagn√≥stico de EmailJS:');
    
    // Verificar scripts
    console.log(`üì¶ EmailJS cargado: ${typeof emailjs !== 'undefined' ? '‚úÖ' : '‚ùå'}`);
    
    // Verificar configuraci√≥n
    console.log('‚öôÔ∏è Configuraci√≥n:');
    console.log(`   PUBLIC_KEY: ${EMAILJS_CONFIG.PUBLIC_KEY ? '‚úÖ Configurado' : '‚ùå Faltante'}`);
    console.log(`   SERVICE_ID: ${EMAILJS_CONFIG.SERVICE_ID ? '‚úÖ Configurado' : '‚ùå Faltante'}`);
    console.log(`   TEMPLATE_CLIENTE: ${EMAILJS_CONFIG.TEMPLATE_CLIENTE ? '‚úÖ Configurado' : '‚ùå Faltante'}`);
    console.log(`   TEMPLATE_ADMIN: ${EMAILJS_CONFIG.TEMPLATE_ADMIN ? '‚úÖ Configurado' : '‚ùå Faltante'}`);
    
    // Probar inicializaci√≥n
    const inicializado = initEmailJS();
    console.log(`üöÄ Inicializaci√≥n: ${inicializado ? '‚úÖ Exitosa' : '‚ùå Fall√≥'}`);
    
    return inicializado;
}

// ===== FUNCIONES DE ENV√çO =====

/**
 * Env√≠a email de confirmaci√≥n al cliente
 */
async function enviarEmailCliente(formData) {
    if (!initEmailJS()) {
        throw new Error('EmailJS no est√° configurado correctamente');
    }
    
    const templateParams = {
        nombre: formData.nombre,
        email: formData.email,
        telefono: formData.telefono,
        ciudad: getCiudadTexto(formData.ciudad, formData.otraCiudad),
        codigoPostal: formData.codigoPostal,
        tipoProyecto: getProyectoTexto(formData.tipoProyecto, formData.otroProyecto),
        descripcion: formData.descripcion,
        fecha: new Date().toLocaleDateString('es-MX', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        })
    };
    
    console.log('üìß Enviando email al cliente:', templateParams);
    
    try {
        const response = await emailjs.send(
            EMAILJS_CONFIG.SERVICE_ID,
            EMAILJS_CONFIG.TEMPLATE_CLIENTE,
            templateParams
        );
        console.log('‚úÖ Email de confirmaci√≥n enviado al cliente:', response);
        return response;
    } catch (error) {
        console.error('‚ùå Error enviando email al cliente:', error);
        
        // Detalles espec√≠ficos del error
        if (error.status === 400) {
            throw new Error('Configuraci√≥n incorrecta de EmailJS (400 Bad Request)');
        } else if (error.status === 403) {
            throw new Error('Credenciales de EmailJS inv√°lidas (403 Forbidden)');
        } else if (error.status === 404) {
            throw new Error('Template o Service ID no encontrado (404 Not Found)');
        } else if (error.text) {
            throw new Error(`Error EmailJS: ${error.text}`);
        } else if (error.message) {
            throw new Error(`Error: ${error.message}`);
        } else {
            throw new Error(`Error de conexi√≥n: ${JSON.stringify(error)}`);
        }
    }
}

/**
 * Env√≠a email de notificaci√≥n al admin
 */
async function enviarEmailAdmin(formData) {
    if (!initEmailJS()) {
        throw new Error('EmailJS no est√° configurado correctamente');
    }
    
    // Para el admin, enviamos los datos del cliente pero al email del admin
    const templateParams = {
        nombre: `[NUEVA SOLICITUD] ${formData.nombre}`,
        email: 'lopez.sil.beto@outlook.com', // Email del admin, no del cliente
        telefono: formData.telefono,
        ciudad: getCiudadTexto(formData.ciudad, formData.otraCiudad),
        codigoPostal: formData.codigoPostal,
        tipoProyecto: getProyectoTexto(formData.tipoProyecto, formData.otroProyecto),
        descripcion: `INFORMACI√ìN DEL CLIENTE:
        
Nombre: ${formData.nombre}
Email: ${formData.email}
Tel√©fono: ${formData.telefono}
Ciudad: ${getCiudadTexto(formData.ciudad, formData.otraCiudad)}
C√≥digo Postal: ${formData.codigoPostal}
Proyecto: ${getProyectoTexto(formData.tipoProyecto, formData.otroProyecto)}

DESCRIPCI√ìN:
${formData.descripcion}

*** ESTE ES UN EMAIL DE NOTIFICACI√ìN PARA EL EQUIPO DE CASA MOBELLE ***
*** El cliente ha sido instruido para responder con fotos y medidas del espacio ***`,
        fecha: new Date().toLocaleDateString('es-MX', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        })
    };
    
    console.log('üìß Enviando email al admin:', templateParams);
    
    try {
        const response = await emailjs.send(
            EMAILJS_CONFIG.SERVICE_ID,
            'lopez.sil.beto@outlook.com',
            templateParams
        );
        console.log('‚úÖ Email de notificaci√≥n enviado al admin:', response);
        return response;
    } catch (error) {
        console.error('‚ùå Error enviando email al admin:', error);
        
        // Detalles espec√≠ficos del error
        if (error.status === 400) {
            throw new Error('Configuraci√≥n incorrecta de EmailJS (400 Bad Request)');
        } else if (error.status === 403) {
            throw new Error('Credenciales de EmailJS inv√°lidas (403 Forbidden)');
        } else if (error.status === 404) {
            throw new Error('Template o Service ID no encontrado (404 Not Found)');
        } else if (error.text) {
            throw new Error(`Error EmailJS: ${error.text}`);
        } else if (error.message) {
            throw new Error(`Error: ${error.message}`);
        } else {
            throw new Error(`Error de conexi√≥n: ${JSON.stringify(error)}`);
        }
    }
}

/**
 * Procesa y env√≠a el formulario de cotizaci√≥n
 */
async function procesarFormularioCotizacion(formData) {
    // Mostrar loading
    mostrarLoading(true);
    
    try {
        // Diagn√≥stico inicial
        console.log('üöÄ Iniciando env√≠o de formulario...');
        
        if (!diagnosticarEmailJS()) {
            throw new Error('EmailJS no est√° configurado correctamente. Revisa la consola para m√°s detalles.');
        }
        
        // Verificar reCAPTCHA en el lado del cliente (b√°sico)
        if (formData.recaptchaToken) {
            console.log('‚úÖ Token reCAPTCHA presente');
        } else {
            console.warn('‚ö†Ô∏è Token reCAPTCHA no encontrado');
        }
        
        console.log('üìä Datos a enviar:', formData);
        
        // Enviar solo email al cliente (EmailJS ya te env√≠a copia autom√°ticamente)
        console.log('üìß Enviando email de confirmaci√≥n al cliente...');
        const response = await enviarEmailCliente(formData);
        
        console.log('‚úÖ Email enviado exitosamente');
        
        // Mostrar mensaje de √©xito
        mostrarMensajeExito();
        
        // Limpiar formulario
        if (window.resetQuoteForm) {
            window.resetQuoteForm();
        }
        
        // Analytics (opcional)
        if (typeof gtag !== 'undefined') {
            gtag('event', 'form_submit', {
                'event_category': 'engagement',
                'event_label': 'cotizacion_form'
            });
        }
        
        console.log('‚úÖ Formulario procesado exitosamente');
        return true;
        
    } catch (error) {
        console.error('‚ùå Error procesando formulario:', error);
        mostrarMensajeError(error.message);
        return false;
    } finally {
        mostrarLoading(false);
    }
}

// ===== FUNCIONES AUXILIARES =====

function getCiudadTexto(ciudad, otraCiudad) {
    switch (ciudad) {
        case 'cdmx':
            return 'Ciudad de M√©xico';
        case 'estado-mexico':
            return 'Estado de M√©xico';
        case 'otra':
            return otraCiudad || 'No especificada';
        default:
            return ciudad || 'No especificada';
    }
}

function getProyectoTexto(tipoProyecto, otroProyecto) {
    switch (tipoProyecto) {
        case 'closet':
            return 'Cl√≥set/Vestidor';
        case 'cocina':
            return 'Cocina integral';
        case 'otro':
            return otroProyecto || 'Proyecto personalizado';
        default:
            return tipoProyecto || 'No especificado';
    }
}

// ===== FUNCIONES DE UI =====

function mostrarLoading(mostrar) {
    const submitBtn = document.querySelector('.btn-cotizar');
    if (!submitBtn) return;
    
    if (mostrar) {
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Enviando...';
    } else {
        submitBtn.disabled = false;
        submitBtn.innerHTML = 'Solicitar Cotizaci√≥n';
    }
}

function mostrarMensajeExito() {
    // Crear modal de √©xito
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    modal.innerHTML = `
        <div class="modal-content success-modal">
            <div class="success-icon">
                <i class="fas fa-check-circle"></i>
            </div>
            <h3>¬°Solicitud Enviada Exitosamente!</h3>
            <p>Hemos recibido tu solicitud de cotizaci√≥n y te hemos enviado un email de confirmaci√≥n.</p>
            <p>Nuestro equipo te contactar√° en las pr√≥ximas <strong>72 horas</strong> para procesar tu solicitud.</p>
            <div style="background: #e7f3ff; padding: 15px; border-radius: 8px; margin: 15px 0; text-align: left;">
                <h4 style="margin-top: 0; color: #0c5460;"><i class="fas fa-camera"></i> Informaci√≥n importante</h4>
                <p style="margin-bottom: 0; font-size: 0.9rem;">Para brindarte un dise√±o y precio m√°s acertado, por favor responde al email de confirmaci√≥n que acabas de recibir adjuntando <strong>fotos y medidas de los espacios</strong> donde se realizar√° el proyecto.</p>
            </div>
            <button onclick="cerrarModal()" class="btn-modal">Entendido</button>
        </div>
    `;
    
    document.body.appendChild(modal);
    modal.style.display = 'flex';
}

function mostrarMensajeError(mensaje) {
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    modal.innerHTML = `
        <div class="modal-content error-modal">
            <div class="error-icon">
                <i class="fas fa-exclamation-triangle"></i>
            </div>
            <h3>Error al Enviar</h3>
            <p>Ha ocurrido un error al enviar tu solicitud:</p>
            <p class="error-message">${mensaje}</p>
            <p>Por favor, intenta nuevamente o cont√°ctanos directamente al <strong>722 289 6977</strong>.</p>
            <button onclick="cerrarModal()" class="btn-modal">Cerrar</button>
        </div>
    `;
    
    document.body.appendChild(modal);
    modal.style.display = 'flex';
}

function cerrarModal() {
    const modal = document.querySelector('.modal-overlay');
    if (modal) {
        modal.remove();
        
        // Si es un modal de √©xito (tiene la clase success-modal), resetear el formulario
        if (modal.querySelector('.success-modal')) {
            // Intentar resetear el formulario primero
            if (window.resetQuoteForm) {
                window.resetQuoteForm();
            } else {
                // Si no est√° disponible la funci√≥n, recargar la p√°gina
                window.location.reload();
            }
        }
    }
}

// ===== EXPORTAR FUNCIONES GLOBALES =====
window.procesarFormularioCotizacion = procesarFormularioCotizacion;
window.cerrarModal = cerrarModal;
window.diagnosticarEmailJS = diagnosticarEmailJS;
