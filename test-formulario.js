/**
 * Script de prueba para verificar la funcionalidad del formulario de cotizaci√≥n
 * Ejecutar este script en la consola del navegador para hacer una prueba
 */

// Funci√≥n para probar el formulario con datos de ejemplo
function probarFormularioCotizacion() {
    console.log('üß™ Iniciando prueba del formulario de cotizaci√≥n...');
    
    // Verificar que EmailJS est√© cargado
    if (typeof emailjs === 'undefined') {
        console.error('‚ùå EmailJS no est√° cargado. Verifica que el script est√© incluido en la p√°gina.');
        return false;
    }
    
    // Verificar que las funciones est√©n disponibles
    if (typeof window.procesarFormularioCotizacion !== 'function') {
        console.error('‚ùå La funci√≥n procesarFormularioCotizacion no est√° disponible.');
        return false;
    }
    
    // Datos de prueba
    const datosPrueba = {
        nombre: 'Juan P√©rez (PRUEBA)',
        email: 'juan.perez.prueba@example.com',
        telefono: '5551234567',
        ciudad: 'cdmx',
        otraCiudad: '',
        codigoPostal: '06100',
        tipoProyecto: 'cocina',
        otroProyecto: '',
        descripcion: 'Esta es una prueba del sistema de formularios. Solicito una cotizaci√≥n para una cocina integral de aproximadamente 15 metros lineales. Preferencia por materiales modernos y acabados en blanco.'
    };
    
    console.log('üìù Datos de prueba:', datosPrueba);
    
    // Simular env√≠o
    window.procesarFormularioCotizacion(datosPrueba)
        .then(result => {
            if (result) {
                console.log('‚úÖ Prueba exitosa! El formulario est√° funcionando correctamente.');
                console.log('üìß Se deber√≠an haber enviado 2 emails:');
                console.log('   1. Confirmaci√≥n al cliente (juan.perez.prueba@example.com)');
                console.log('   2. Notificaci√≥n al admin (tu email configurado)');
            } else {
                console.log('‚ö†Ô∏è La prueba fall√≥, pero no hubo errores cr√≠ticos.');
            }
        })
        .catch(error => {
            console.error('‚ùå Error en la prueba:', error);
            console.log('üí° Posibles causas:');
            console.log('   - EmailJS no est√° configurado correctamente');
            console.log('   - Las claves en email-handler.js no est√°n actualizadas');
            console.log('   - Problema de conexi√≥n a internet');
            console.log('   - Configuraci√≥n incorrecta en EmailJS');
        });
}

// Funci√≥n para verificar la configuraci√≥n
function verificarConfiguracion() {
    console.log('üîç Verificando configuraci√≥n...');
    
    // Ejecutar diagn√≥stico de EmailJS si est√° disponible
    if (typeof window.diagnosticarEmailJS === 'function') {
        console.log('\nüìß Diagn√≥stico EmailJS:');
        window.diagnosticarEmailJS();
    }
    
    // Verificar scripts cargados
    const scripts = {
        'EmailJS': typeof emailjs !== 'undefined',
        'Funci√≥n principal': typeof window.procesarFormularioCotizacion === 'function',
        'Funci√≥n de modal': typeof window.cerrarModal === 'function',
        'Funci√≥n diagn√≥stico': typeof window.diagnosticarEmailJS === 'function'
    };
    
    console.log('\nüìä Estado de los scripts:');
    Object.entries(scripts).forEach(([nombre, cargado]) => {
        console.log(`   ${cargado ? '‚úÖ' : '‚ùå'} ${nombre}: ${cargado ? 'Cargado' : 'No cargado'}`);
    });
    
    // Verificar elementos del DOM
    const elementos = {
        'Formulario': document.getElementById('cotizacionForm'),
        'Bot√≥n enviar': document.querySelector('.btn-cotizar')
    };
    
    console.log('üèóÔ∏è Estado de elementos del DOM:');
    Object.entries(elementos).forEach(([nombre, elemento]) => {
        console.log(`   ${elemento ? '‚úÖ' : '‚ùå'} ${nombre}: ${elemento ? 'Encontrado' : 'No encontrado'}`);
    });
    
    // Verificar CSS
    const estilos = {
        'Estilos principales': !!document.querySelector('link[href*="styles.css"]'),
        'Estilos de cotizaci√≥n': !!document.querySelector('link[href*="cotiza-styles.css"]'),
        'Estilos de modal': !!document.querySelector('link[href*="modal-styles.css"]')
    };
    
    console.log('üé® Estado de los estilos CSS:');
    Object.entries(estilos).forEach(([nombre, cargado]) => {
        console.log(`   ${cargado ? '‚úÖ' : '‚ùå'} ${nombre}: ${cargado ? 'Cargado' : 'No cargado'}`);
    });
    
    return scripts && elementos && estilos;
}

// Funci√≥n para llenar el formulario autom√°ticamente (para pruebas)
function llenarFormularioPrueba() {
    console.log('üìù Llenando formulario con datos de prueba...');
    
    // Llenar campos b√°sicos
    const campos = {
        'nombre': 'Mar√≠a Garc√≠a (PRUEBA)',
        'telefono': '5559876543',
        'email': 'maria.garcia.prueba@example.com',
        'codigoPostal': '52172',
        'descripcion': 'Solicito cotizaci√≥n para un closet empotrado de 3 metros de ancho x 2.5 metros de alto. Necesito diferentes compartimentos para ropa, zapatos y accesorios. Preferencia por acabados en madera.'
    };
    
    Object.entries(campos).forEach(([id, valor]) => {
        const elemento = document.getElementById(id);
        if (elemento) {
            elemento.value = valor;
            console.log(`   ‚úÖ ${id}: "${valor}"`);
        } else {
            console.log(`   ‚ùå Campo ${id} no encontrado`);
        }
    });
    
    // Simular clic en botones de selecci√≥n
    setTimeout(() => {
        const botonCiudad = document.querySelector('#ciudadButtons [data-value="estado-mexico"]');
        const botonProyecto = document.querySelector('#proyectoButtons [data-value="closet"]');
        
        if (botonCiudad) {
            botonCiudad.click();
            console.log('   ‚úÖ Ciudad seleccionada: Estado de M√©xico');
        }
        
        if (botonProyecto) {
            botonProyecto.click();
            console.log('   ‚úÖ Proyecto seleccionado: Cl√≥set/Vestidor');
        }
        
        console.log('‚úÖ Formulario llenado completamente. Puedes hacer clic en "Solicitar Cotizaci√≥n" para probar.');
    }, 500);
}

// Funci√≥n para mostrar ayuda
function mostrarAyuda() {
    console.log(`
üÜò AYUDA - Funciones disponibles para pruebas:

1. verificarConfiguracion()
   - Verifica que todos los scripts y elementos est√©n cargados correctamente

2. diagnosticarEmailJS()
   - Diagn√≥stico espec√≠fico de EmailJS (configuraci√≥n, conexi√≥n, etc.)

3. llenarFormularioPrueba()
   - Llena el formulario autom√°ticamente con datos de prueba

4. probarFormularioCotizacion()
   - Env√≠a una solicitud de prueba sin usar el formulario

5. solucionarProblemas()
   - Gu√≠a paso a paso para solucionar errores comunes

6. mostrarAyuda()
   - Muestra esta ayuda

üìù Pasos recomendados para probar:
1. Ejecuta: verificarConfiguracion()
2. Si hay errores, ejecuta: solucionarProblemas()
3. Si todo est√° bien, ejecuta: llenarFormularioPrueba()
4. Haz clic en "Solicitar Cotizaci√≥n" en la p√°gina

‚ö†Ô∏è IMPORTANTE:
- Aseg√∫rate de haber configurado EmailJS primero
- Las pruebas enviar√°n emails reales si est√° configurado
    `);
}

// Nueva funci√≥n para solucionar problemas
function solucionarProblemas() {
    console.log('üîß SOLUCIONADOR DE PROBLEMAS EmailJS\n');
    
    // Paso 1: Verificar carga de EmailJS
    if (typeof emailjs === 'undefined') {
        console.log('‚ùå PROBLEMA: EmailJS no est√° cargado');
        console.log('üí° SOLUCI√ìN:');
        console.log('   1. Verifica que este script est√© en tu HTML:');
        console.log('      <script src="https://cdn.emailjs.com/dist/email.min.js"></script>');
        console.log('   2. Debe ir ANTES de email-handler.js');
        console.log('   3. Recarga la p√°gina');
        return;
    }
    console.log('‚úÖ EmailJS est√° cargado correctamente');
    
    // Paso 2: Verificar configuraci√≥n
    if (typeof window.diagnosticarEmailJS === 'function') {
        console.log('\nüîç Ejecutando diagn√≥stico...');
        const resultado = window.diagnosticarEmailJS();
        
        if (!resultado) {
            console.log('\n‚ùå PROBLEMA: Configuraci√≥n de EmailJS incorrecta');
            console.log('üí° SOLUCIONES POSIBLES:');
            console.log('   1. Verifica tu Public Key en EmailJS dashboard');
            console.log('   2. Verifica tu Service ID');
            console.log('   3. Verifica los Template IDs');
            console.log('   4. Aseg√∫rate de que el servicio est√© activo');
            return;
        }
        console.log('‚úÖ Configuraci√≥n de EmailJS correcta');
    }
    
    // Paso 3: Probar conexi√≥n
    console.log('\nüì° Probando conexi√≥n con EmailJS...');
    emailjs.send('test', 'test', {})
        .then(() => {
            console.log('Esto no deber√≠a suceder...');
        })
        .catch((error) => {
            console.log('Error capturado:', error);
            const mensaje = error?.message || error?.text || 'Error desconocido';
            if (mensaje.includes('Invalid') || mensaje.includes('not found') || mensaje.includes('Bad Request')) {
                console.log('‚úÖ Conexi√≥n con EmailJS funcionando (error esperado de configuraci√≥n de prueba)');
                console.log('\nüéØ TODO LISTO - Puedes probar el formulario ahora');
                console.log('Ejecuta: llenarFormularioPrueba()');
            } else {
                console.log('‚ùå Problema de conexi√≥n:', mensaje);
                console.log('üí° Verifica tu conexi√≥n a internet');
            }
        });
}

// Ejecutar verificaci√≥n autom√°tica al cargar
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Script de prueba de Casa Mobelle cargado.');
    console.log('üí° Ejecuta mostrarAyuda() para ver las funciones disponibles.');
    
    // Verificaci√≥n autom√°tica despu√©s de 2 segundos
    setTimeout(verificarConfiguracion, 2000);
});

// Exportar funciones globalmente para acceso desde consola
window.probarFormularioCotizacion = probarFormularioCotizacion;
window.verificarConfiguracion = verificarConfiguracion;
window.llenarFormularioPrueba = llenarFormularioPrueba;
window.mostrarAyuda = mostrarAyuda;
window.solucionarProblemas = solucionarProblemas;
