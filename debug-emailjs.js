/**
 * Script de depuraci√≥n para EmailJS - Casa Mobelle
 * Este script ayuda a identificar problemas comunes
 */

console.log('üîß DEBUG EmailJS - Iniciando diagn√≥stico...');

// Funci√≥n de diagn√≥stico autom√°tico
function diagnosticoCompleto() {
    console.log('\n=== üîç DIAGN√ìSTICO COMPLETO EmailJS ===\n');
    
    // 1. Verificar carga de EmailJS
    console.log('1Ô∏è‚É£ Verificando carga de EmailJS...');
    if (typeof emailjs === 'undefined') {
        console.error('‚ùå EmailJS NO est√° cargado');
        console.log('üí° Soluci√≥n: Verifica que este script est√© en tu HTML ANTES de email-handler.js:');
        console.log('   <script src="https://cdn.jsdelivr.net/npm/@emailjs/browser@4/dist/email.min.js"></script>');
        return false;
    } else {
        console.log('‚úÖ EmailJS est√° cargado correctamente');
        console.log('   Versi√≥n:', emailjs.version || 'No disponible');
    }
    
    // 2. Verificar configuraci√≥n
    console.log('\n2Ô∏è‚É£ Verificando configuraci√≥n...');
    if (typeof window.EMAILJS_CONFIG !== 'undefined') {
        console.log('‚úÖ Configuraci√≥n encontrada:');
        console.log('   PUBLIC_KEY:', window.EMAILJS_CONFIG?.PUBLIC_KEY ? '‚úÖ Configurado' : '‚ùå Faltante');
        console.log('   SERVICE_ID:', window.EMAILJS_CONFIG?.SERVICE_ID ? '‚úÖ Configurado' : '‚ùå Faltante');
        console.log('   TEMPLATE_CLIENTE:', window.EMAILJS_CONFIG?.TEMPLATE_CLIENTE ? '‚úÖ Configurado' : '‚ùå Faltante');
        console.log('   TEMPLATE_ADMIN:', window.EMAILJS_CONFIG?.TEMPLATE_ADMIN ? '‚úÖ Configurado' : '‚ùå Faltante');
    } else {
        console.error('‚ùå No se encontr√≥ EMAILJS_CONFIG');
        console.log('üí° Verifica que email-handler.js se est√© cargando correctamente');
    }
    
    // 3. Verificar funciones principales
    console.log('\n3Ô∏è‚É£ Verificando funciones principales...');
    const funciones = [
        'procesarFormularioCotizacion',
        'diagnosticarEmailJS',
        'cerrarModal'
    ];
    
    funciones.forEach(nombreFuncion => {
        if (typeof window[nombreFuncion] === 'function') {
            console.log(`‚úÖ ${nombreFuncion} est√° disponible`);
        } else {
            console.error(`‚ùå ${nombreFuncion} NO est√° disponible`);
        }
    });
    
    // 4. Verificar elementos del DOM
    console.log('\n4Ô∏è‚É£ Verificando elementos del formulario...');
    const elementos = {
        'cotizacionForm': 'Formulario principal',
        'nombre': 'Campo nombre',
        'email': 'Campo email',
        'telefono': 'Campo tel√©fono',
        'descripcion': 'Campo descripci√≥n',
        'fileInput': 'Input de archivos'
    };
    
    Object.entries(elementos).forEach(([id, descripcion]) => {
        const elemento = document.getElementById(id);
        if (elemento) {
            console.log(`‚úÖ ${descripcion} encontrado`);
        } else {
            console.error(`‚ùå ${descripcion} NO encontrado (ID: ${id})`);
        }
    });
    
    // 5. Verificar CSS
    console.log('\n5Ô∏è‚É£ Verificando estilos CSS...');
    const estilos = [
        'styles.css',
        'cotiza-styles.css',
        'modal-styles.css'
    ];
    
    estilos.forEach(archivo => {
        const link = document.querySelector(`link[href*="${archivo}"]`);
        if (link) {
            console.log(`‚úÖ ${archivo} cargado`);
        } else {
            console.warn(`‚ö†Ô∏è ${archivo} NO encontrado`);
        }
    });
    
    // 6. Probar inicializaci√≥n de EmailJS
    console.log('\n6Ô∏è‚É£ Probando inicializaci√≥n de EmailJS...');
    try {
        if (window.EMAILJS_CONFIG?.PUBLIC_KEY) {
            emailjs.init({
                publicKey: window.EMAILJS_CONFIG.PUBLIC_KEY,
            });
            console.log('‚úÖ EmailJS inicializado correctamente');
        } else {
            console.error('‚ùå No se puede inicializar: PUBLIC_KEY no encontrado');
        }
    } catch (error) {
        console.error('‚ùå Error al inicializar EmailJS:', error);
    }
    
    console.log('\n=== üèÅ FIN DEL DIAGN√ìSTICO ===\n');
    
    // Mensaje final
    console.log('üí° PR√ìXIMOS PASOS:');
    console.log('1. Si ves errores ‚ùå, soluci√≥nals primero');
    console.log('2. Si todo est√° ‚úÖ, prueba el formulario');
    console.log('3. Ejecuta: llenarFormularioPrueba() para prueba autom√°tica');
    console.log('4. O llena el formulario manualmente y env√≠a');
    
    return true;
}

// Funci√≥n para capturar errores en tiempo real
function capturarErrores() {
    // Capturar errores de JavaScript
    window.addEventListener('error', function(e) {
        console.error('üö® ERROR CAPTURADO:', {
            mensaje: e.message,
            archivo: e.filename,
            linea: e.lineno,
            columna: e.colno,
            error: e.error
        });
        
        if (e.message.includes('emailjs') || e.filename.includes('email')) {
            console.log('üí° Este parece ser un error relacionado con EmailJS');
            console.log('   Ejecuta diagnosticoCompleto() para m√°s informaci√≥n');
        }
    });
    
    // Capturar promesas rechazadas
    window.addEventListener('unhandledrejection', function(e) {
        console.error('üö® PROMESA RECHAZADA:', e.reason);
        
        if (e.reason?.message?.includes('emailjs') || 
            e.reason?.message?.includes('403') || 
            e.reason?.message?.includes('Invalid')) {
            console.log('üí° Este parece ser un error de EmailJS');
            console.log('   Verifica tu configuraci√≥n en EmailJS dashboard');
        }
    });
}

// Ejecutar autom√°ticamente cuando el DOM est√© listo
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Debug EmailJS cargado');
    capturarErrores();
    
    // Esperar un momento para que otros scripts se carguen
    setTimeout(() => {
        diagnosticoCompleto();
    }, 1000);
});

// Hacer funci√≥n disponible globalmente
window.diagnosticoCompleto = diagnosticoCompleto;

// Funci√≥n para probar espec√≠ficamente las credenciales de EmailJS
function probarCredencialesEmailJS() {
    console.log('\nüîê PROBANDO CREDENCIALES EmailJS...\n');
    
    if (typeof emailjs === 'undefined') {
        console.error('‚ùå EmailJS no est√° cargado');
        return;
    }
    
    if (!window.EMAILJS_CONFIG) {
        console.error('‚ùå Configuraci√≥n EMAILJS_CONFIG no encontrada');
        return;
    }
    
    const config = window.EMAILJS_CONFIG;
    console.log('üìã Configuraci√≥n actual:');
    console.log(`   PUBLIC_KEY: ${config.PUBLIC_KEY}`);
    console.log(`   SERVICE_ID: ${config.SERVICE_ID}`);
    console.log(`   TEMPLATE_CLIENTE: ${config.TEMPLATE_CLIENTE}`);
    console.log('   ‚ÑπÔ∏è  Solo se enviar√° email al cliente (EmailJS te env√≠a copia autom√°tica)');
    
    // Probar inicializaci√≥n
    console.log('\nüöÄ Probando inicializaci√≥n...');
    try {
        emailjs.init({
            publicKey: config.PUBLIC_KEY
        });
        console.log('‚úÖ Inicializaci√≥n exitosa');
    } catch (error) {
        console.error('‚ùå Error en inicializaci√≥n:', error);
        return;
    }
    
    // Probar env√≠o con datos m√≠nimos
    console.log('\nüì§ Probando env√≠o de email al cliente...');
    
    const templateParams = {
        nombre: 'PRUEBA SISTEMA',
        email: 'test@test.com',
        telefono: '5555555555',
        ciudad: 'Ciudad de M√©xico',
        codigoPostal: '06100',
        tipoProyecto: 'Cocina integral',
        descripcion: 'Esta es una prueba autom√°tica del sistema EmailJS'
    };
    
    console.log('üìù Par√°metros de prueba:', templateParams);
    
    // Probar solo template de cliente
    emailjs.send(config.SERVICE_ID, config.TEMPLATE_CLIENTE, templateParams)
        .then((response) => {
            console.log('‚úÖ √âXITO - Email enviado correctamente:', response);
            console.log('   Status:', response.status);
            console.log('   Text:', response.text);
            console.log('\nüéâ ¬°PRUEBA EXITOSA!');
            console.log('üí° El formulario est√° funcionando correctamente.');
            console.log('ÔøΩ EmailJS deber√≠a enviarte una copia autom√°ticamente.');
        })
        .catch((error) => {
            console.error('‚ùå ERROR en env√≠o:', error);
            console.log('\nüîç Detalles del error:');
            console.log('   Status:', error.status);
            console.log('   Message:', error.message || 'Sin mensaje');
            console.log('   Text:', error.text || 'Sin texto');
            
            // An√°lisis espec√≠fico del error
            if (error.status === 400) {
                console.log('\nüí° ERROR 400 - Bad Request:');
                console.log('   - Verifica que el Template ID sea correcto: template_s60kolv');
                console.log('   - Verifica que el Service ID sea correcto: service_i8ylqzi');
                console.log('   - Revisa que el template tenga las variables correctas');
            } else if (error.status === 403) {
                console.log('\nüí° ERROR 403 - Forbidden:');
                console.log('   - La Public Key es incorrecta');
                console.log('   - El servicio no est√° activo en EmailJS');
                console.log('   - Has excedido el l√≠mite de emails del plan gratuito');
            } else if (error.status === 404) {
                console.log('\nüí° ERROR 404 - Not Found:');
                console.log('   - El Service ID no existe');
                console.log('   - El Template ID no existe');
                console.log('   - Verifica los IDs en tu dashboard de EmailJS');
            } else {
                console.log('\nüí° Error de red o configuraci√≥n:');
                console.log('   - Problema de conexi√≥n a internet');
                console.log('   - Firewall bloqueando EmailJS');
                console.log('   - Error temporal del servicio');
            }
        });
}

// Hacer funciones disponibles globalmente
window.probarCredencialesEmailJS = probarCredencialesEmailJS;
